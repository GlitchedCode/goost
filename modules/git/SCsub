#!/usr/bin/env python3

Import("env")
Import("env_modules")

env_git = env_modules.Clone()

# Thirdparty source files.
thirdparty_sources = []
thirdparty_sources += Glob("thirdparty/libgit2/src/" + "*.c")
thirdparty_sources += Glob("thirdparty/libgit2/src/allocators/" + "*.c")
thirdparty_sources += Glob("thirdparty/libgit2/src/hash/sha1/sha1dc/sha1.c")
thirdparty_sources += Glob("thirdparty/libgit2/src/hash/sha1/sha1dc/ubc_check.c")
thirdparty_sources += Glob("thirdparty/libgit2/src/hash/sha1/collisiondetect.c")
thirdparty_sources += Glob("thirdparty/libgit2/src/transports/" + "*.c")
thirdparty_sources += Glob("thirdparty/libgit2/src/hash/transports/" + "*.c")
thirdparty_sources += Glob("thirdparty/libgit2/src/hash/xdiff/" + "*.c")
thirdparty_sources += Glob("thirdparty/libgit2/src/xdiff/" + "*.c")
thirdparty_sources += Glob("thirdparty/libgit2/src/streams/" + "*.c")

thirdparty_sources += Glob("thirdparty/libgit2/deps/http-parser/" + "*.c")

if env["bits"] == 64:
    env_git.Prepend(CPPDEFINES=["GIT_ARCH_64"])
elif env["bits"] == 32:
    env_git.Prepend(CPPDEFINES=["GIT_ARCH_32"])

if env["platform"] == "windows":
    # env_git.Prepend(CPPDEFINES=["GIT_WINHTTP"])
    thirdparty_sources += Glob("thirdparty/libgit2/src/win32/" + "*.c")

if env["platform"] in ["x11", "osx"]:
    thirdparty_sources += Glob("thirdparty/libgit2/src/unix/" + "*.c")

env_git.Prepend(
    CPPPATH=[
        "thirdparty/libgit2/include/",
        "thirdparty/libgit2/src/",
        "thirdparty/libgit2/deps/http-parser/",
        "thirdparty/libgit2/deps/pcre/",
        "#thirdparty/pcre2/src/",
    ]
)
env_git.Prepend(
    CPPDEFINES=[
        "GIT_THREADS",
        # "GIT_SSH",
        # "GIT_SSH_MEMORY_CREDENTIALS",
        "LIBGIT2_NO_FEATURES_H",
        "GIT_SHA1_COLLISIONDETECT",
        # "GIT_HTTPS",
        "SRC_UTIL_H_",
        "GIT_REGEX_BUILTIN",
    ]
)

env_pcre = env_git.Clone()
env_pcre.add_source_files(env.modules_sources, Glob("thirdparty/libgit2/deps/pcre/" + "*.c"))
env_pcre.disable_warnings()

if env["platform"] == "windows":
    env_pcre.Prepend(
        CPPDEFINES=[
            "HAVE_SYS_STAT_H",
            "HAVE_SYS_TYPES_H",
            "HAVE_WINDOWS_H",
            "HAVE_STDINT_H",
            "HAVE_INTTYPES_H",
            "HAVE_MEMMOVE",
            "HAVE_STRERROR",
            "HAVE_STRTOLL",
            "HAVE__STRTOI64",
            "SUPPORT_PCRE8",
            "NO_RECURSE",
            "HAVE_LONG_LONG",
            "HAVE_UNSIGNED_LONG_LONG",
            ("NEWLINE", "10"),
            ("POSIX_MALLOC_THRESHOLD", "10"),
            ("LINK_SIZE", "2"),
            ("PARENS_NEST_LIMIT", "250"),
            ("MATCH_LIMIT", "10000000"),
            ("MATCH_LIMIT_RECURSION", "10000000"),
            "PCREGREP_BUFSIZE",
            ("MAX_NAME_SIZE", "32"),
            ("MAX_NAME_COUNT", "10000"),
        ]
    )

if env["platform"] in ["x11", "osx"]:
    env_pcre.Prepend(
        CPPDEFINES=[
			"HAVE_DIRENT_H",
            "HAVE_SYS_STAT_H",
            "HAVE_SYS_TYPES_H",
            "HAVE_UNISTD_H",
            "HAVE_STDINT_H",
            "HAVE_INTTYPES_H",
            "HAVE_BCOPY",
            "HAVE_MEMMOVE",
            "HAVE_STRERROR",
            "HAVE_STRTOLL",
            "HAVE_STRTOQ",
            "SUPPORT_PCRE8",
            "NO_RECURSE",
            "HAVE_LONG_LONG",
            "HAVE_UNSIGNED_LONG_LONG",
            ("NEWLINE", "10"),
            ("POSIX_MALLOC_THRESHOLD", "10"),
            ("LINK_SIZE", "2"),
            ("PARENS_NEST_LIMIT", "250"),
            ("MATCH_LIMIT", "10000000"),
            ("MATCH_LIMIT_RECURSION", "10000000"),
            "PCREGREP_BUFSIZE",
            ("MAX_NAME_SIZE", "32"),
            ("MAX_NAME_COUNT", "10000"),
        ]
    )

env_thirdparty = env_git.Clone()
env_thirdparty.add_source_files(env.modules_sources, thirdparty_sources)
env_thirdparty.disable_warnings()

# Module source files.
env_git.add_source_files(env.modules_sources, "*.cpp")
