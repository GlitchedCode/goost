<?xml version="1.0" encoding="UTF-8" ?>
<class name="Graph" inherits="Reference" version="3.5">
	<brief_description>
		A general-purpose mixed graph, characterized by having both undirected (associative) and directed edges.
	</brief_description>
	<description>
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="_create_edge" qualifiers="virtual">
			<return type="Object" />
			<description>
			</description>
		</method>
		<method name="_create_vertex" qualifiers="virtual">
			<return type="Object" />
			<description>
			</description>
		</method>
		<method name="add_directed_edge">
			<return type="GraphEdge" />
			<argument index="0" name="from" type="Variant" />
			<argument index="1" name="to" type="Variant" />
			<argument index="2" name="value" type="Variant" default="1.0" />
			<description>
			</description>
		</method>
		<method name="add_edge">
			<return type="GraphEdge" />
			<argument index="0" name="a" type="Variant" />
			<argument index="1" name="b" type="Variant" />
			<argument index="2" name="value" type="Variant" default="1.0" />
			<description>
			</description>
		</method>
		<method name="add_vertex">
			<return type="GraphVertex" />
			<argument index="0" name="value" type="Variant" />
			<description>
			</description>
		</method>
		<method name="clear">
			<return type="void" />
			<description>
				Removes all vertices and edges from the graph.
			</description>
		</method>
		<method name="clear_edges">
			<return type="void" />
			<description>
				Removes all edges from the graph while retaining all original vertices.
			</description>
		</method>
		<method name="find_connected_component">
			<return type="Array" />
			<argument index="0" name="vertex" type="GraphVertex" />
			<description>
				Returns an array of vertices representing a connected component in an [b]undirected[/b] graph starting from arbitrary [code]vertex[/code] root.
			</description>
		</method>
		<method name="find_edge" qualifiers="const">
			<return type="GraphEdge" />
			<argument index="0" name="a" type="GraphVertex" />
			<argument index="1" name="b" type="GraphVertex" />
			<description>
			</description>
		</method>
		<method name="find_vertex">
			<return type="GraphVertex" />
			<argument index="0" name="value" type="Variant" />
			<description>
			</description>
		</method>
		<method name="get_connected_components">
			<return type="Dictionary" />
			<description>
				Returns a [Dictionary] of all [i]connected components[/i] in the graph. The keys consist of a set of vertices called [i]representatives[/i], while values contain all [i]members[/i] vertices of that representative. All members represent a connected component. A representative is considered as a member of the connected component. A connected component may consist of a single vertex.
			</description>
		</method>
		<method name="get_edge_count" qualifiers="const">
			<return type="int" />
			<description>
			</description>
		</method>
		<method name="get_edge_list" qualifiers="const">
			<return type="Array" />
			<argument index="0" name="a" type="GraphVertex" default="null" />
			<argument index="1" name="b" type="GraphVertex" default="null" />
			<description>
			</description>
		</method>
		<method name="get_vertex_count" qualifiers="const">
			<return type="int" />
			<description>
			</description>
		</method>
		<method name="get_vertex_list" qualifiers="const">
			<return type="Array" />
			<description>
			</description>
		</method>
		<method name="has_edge" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="a" type="GraphVertex" />
			<argument index="1" name="b" type="GraphVertex" />
			<description>
			</description>
		</method>
		<method name="has_vertex" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="vertex" type="GraphVertex" />
			<description>
			</description>
		</method>
		<method name="is_strongly_connected">
			<return type="bool" />
			<description>
				Returns [code]true[/code] if there exist at least one path connecting any two vertices. Applies both to undirected and directed graphs.
			</description>
		</method>
		<method name="remove_edge">
			<return type="void" />
			<argument index="0" name="edge" type="GraphEdge" />
			<description>
			</description>
		</method>
		<method name="remove_vertex">
			<return type="void" />
			<argument index="0" name="vertex" type="GraphVertex" />
			<description>
			</description>
		</method>
	</methods>
	<members>
		<member name="iterator" type="GraphIterator" setter="set_iterator" getter="get_iterator">
			An iterator used for traversing the graph's vertices, for methods like [method find_connected_component]. The default iterator is based on depth-first search algorithm. You can extend [GraphIterator] class via script to customize the algorithm.
			If set to [code]null[/code], the default iterator is used.
		</member>
	</members>
	<constants>
	</constants>
</class>
